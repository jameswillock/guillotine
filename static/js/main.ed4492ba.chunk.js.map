{"version":3,"sources":["components/Game/Game.module.css","components/Keycap/Keycap.module.css","components/Guesses/Guesses.module.css","utilities/words.js","components/Keycap/Keycap.tsx","components/Guesses/Guesses.tsx","components/Game/Game.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","Game","Solution","Info","Keycap","Reset","Guesses","utilities_words","words","Math","floor","random","length","toUpperCase","classNames","classes","this","props","reset","push","react_default","a","createElement","onClick","handler","className","join","letter","PureComponent","defaultProps","resetKeycap","Keycap_Keycap","key","_this","resetClickHandler","_this2","layout","map","row","index","characters","guessClickHandler","Status","typed","statusElement","state","guesses","Set","solution","word","status","InProgress","setStatusRef","element","setupTyped","Typed","strings","displayStatus","hasFailed","Failed","hasSucceeded","Suceeded","Array","from","every","has","incorrectGuesses","allowedIncorrectGuesses","setState","prevState","add","displaySolution","character","concat","guessesRemaining","Object","toConsumableArray","filter","includes","destroy","_","size","ref","Guesses_Guesses","App","Game_Game","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed4492ba.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Game\":\"Game_Game__2W7am\",\"Solution\":\"Game_Solution__1ykZM\",\"Info\":\"Game_Info__D0dbG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Keycap\":\"Keycap_Keycap__1rmQq\",\"Reset\":\"Keycap_Reset__3n05P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Guesses\":\"Guesses_Guesses__UyjWc\"};","import words from './words.json';\n\nexport default () => words[Math.floor((Math.random() * words.length))].toUpperCase();\n","import React, { PureComponent, SyntheticEvent } from 'react';\nimport classes from './Keycap.module.css';\n\ninterface Props {\n  letter: string,\n  reset: boolean,\n  handler: (event: React.MouseEvent<HTMLButtonElement>) => void\n};\n\nexport default class Keycap extends PureComponent<Props> {\n  static defaultProps = {\n    reset: false\n  };\n\n  render() {\n    const classNames = [classes.Keycap];\n    if (this.props.reset) classNames.push(classes.Reset);\n\n    return (\n      <button onClick={this.props.handler} className={classNames.join(' ')}>\n        {this.props.letter}\n      </button>\n    );\n  }\n}\n","import React, { PureComponent, ReactElement } from 'react';\nimport Keycap from '../Keycap/Keycap';\nimport classes from './Guesses.module.css';\n\ninterface Props {\n  guessClickHandler: (letter: string) => void\n  resetClickHandler: () => void\n};\n\nexport default class Guesses extends PureComponent<Props> {\n  static readonly layout: Array<Array<string>> = [\n    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n    ['Z', 'X', 'C', 'V', 'B', 'N', 'M']\n  ];\n\n  resetKeycap = () => <Keycap key=\"reset\" letter=\"Reset\" handler={this.props.resetClickHandler} reset />;\n\n  render() {\n    return Guesses.layout.map((row: Array<string>, index: number) => {\n      const characters = row.map((letter: string) => {\n        return <Keycap key={letter} letter={letter} handler={() => this.props.guessClickHandler(letter)} />;\n      });\n\n      if (index === Guesses.layout.length - 1) characters.push(this.resetKeycap());\n  \n      return <div key={index} className={classes.Guesses}>{characters}</div>;\n    });\n  }\n}\n","import React, { PureComponent } from 'react';\nimport word from '../../utilities/words';\nimport Guesses from '../Guesses/Guesses';\nimport classes from './Game.module.css';\nimport Typed from 'typed.js';\n\ninterface State {\n  guesses: Set<string>,\n  solution: string,\n  status: Status\n}\n\nenum Status {\n  InProgress,\n  Failed,\n  Suceeded\n}\n\nexport default class Game extends PureComponent<{}, State> {\n  static allowedIncorrectGuesses = 7;\n\n  typed?: Typed;\n  statusElement?: any;\n\n  state = {\n    guesses: new Set(),\n    solution: word(),\n    status: Status.InProgress, \n  };\n\n  setStatusRef = (element: HTMLSpanElement) => {\n    this.statusElement = element;\n  };\n\n  setupTyped = () => {\n    if (!this.statusElement) return;\n\n    return new Typed(this.statusElement, {\n      strings: [this.displayStatus()]\n    });\n  };\n\n  componentWillUnmount() {\n    if (this.typed) this.typed.destroy();\n  }\n\n  componentDidMount() {\n    this.typed = this.setupTyped();\n  }\n\n  componentDidUpdate(_: {}, prevState: State) {\n    if (this.typed) this.typed.destroy();\n\n    this.typed = this.setupTyped();\n\n    const guessesIntersection = new Set(\n      [...this.state.guesses].filter(character =>\n        !prevState.guesses.has(character)\n      )\n    );\n\n    if (guessesIntersection.size > 0) {\n      this.setState({ status: this.status() });\n    }\n  };\n\n  status = ()  => {\n    if (this.hasFailed()) return Status.Failed;\n    if (this.hasSucceeded()) return Status.Suceeded;\n    return Status.InProgress;\n  }\n\n  hasSucceeded = () => {\n    return Array.from(this.state.solution).every(letter =>\n      this.state.guesses.has(letter)\n    );\n  };\n\n  hasFailed = () => {\n    if (this.hasSucceeded()) return false;\n    return this.incorrectGuesses().length >= Game.allowedIncorrectGuesses;\n  };\n\n  guessClickHandler = (letter: string) => {\n    if (this.state.status !== Status.InProgress) return;\n\n    this.setState(prevState => {\n      const guesses = new Set(prevState.guesses).add(letter);\n      return { guesses: guesses };\n    });\n  };\n\n  resetClickHandler = () => {\n    this.setState({\n      guesses: new Set(),\n      solution: word(),\n      status: Status.InProgress\n    });\n  };\n\n  displaySolution = () => {\n    return Array.from(this.state.solution).map(character => \n      this.state.guesses.has(character) ? character : '_'\n    ).join('');\n  };\n\n  displayStatus = () => {\n    switch (this.state.status) {\n      case Status.Suceeded:\n        return \"Congratulations, you guessed correctly!\";\n      case Status.Failed:\n        return `You failed. The answer was <strong>${this.state.solution}</strong>.`;\n      default:\n        return `<strong>${this.guessesRemaining()}</strong> guesses remaining.`;\n    }\n  };\n\n  incorrectGuesses = () => {\n    return [...this.state.guesses].filter(character =>\n      !this.state.solution.includes(character)\n    );\n  };\n\n  guessesRemaining = () => {\n    return Game.allowedIncorrectGuesses - this.incorrectGuesses().length;\n  }\n\n  render() {\n    return (\n      <div className={classes.Game}>\n        <div className={classes.Solution}>\n          {this.displaySolution()}\n        </div>\n        <div className={classes.Info}>\n          <span ref={this.setStatusRef}></span>\n        </div>\n        <div>\n          <Guesses guessClickHandler={this.guessClickHandler}\n            resetClickHandler={this.resetClickHandler} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Game from './components/Game/Game';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return <Game />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root') as HTMLElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}