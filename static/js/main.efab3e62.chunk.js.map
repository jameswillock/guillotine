{"version":3,"sources":["containers/Game/Game.module.css","components/Keycap/Keycap.module.css","components/ResetKeycap/ResetKeycap.module.css","components/Guesses/Guesses.module.css","store/guesses/types.ts","utilities/words.js","store/guesses/reducer.ts","store/index.ts","components/Keycap/Keycap.tsx","components/ResetKeycap/ResetKeycap.tsx","components/Guesses/Guesses.tsx","containers/Game/Game.tsx","store/guesses/actions.ts","App.tsx","serviceWorker.js","index.tsx","configureStore.ts"],"names":["module","exports","Game","Solution","Info","Keycap","ResetKeycap","Guesses","GuessesActionTypes","utilities_words","words","Math","floor","random","length","toUpperCase","initialState","guesses","Set","solution","word","status","concat","reducer","state","arguments","undefined","action","type","RESET","Object","objectSpread","GUESS","has","payload","add","Array","from","every","letter","hasWon","toConsumableArray","filter","character","includes","hasLost","incorrectGuessesRemaining","rootReducer","combineReducers","guessesReducer","React","memo","props","react_default","a","createElement","onClick","handler","className","classes","layout","keycaps","map","row","index","characters","key","guessClickHandler","push","resetClickHandler","Fragment","displaySolution","_this","join","this","PureComponent","connect","_ref","dispatch","guessAction","App","containers_Game_Game","Component","Boolean","window","location","hostname","match","store","createStore","composeWithDevTools","applyMiddleware","logger","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.efab3e62.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Game\":\"Game_Game__1UTzP\",\"Solution\":\"Game_Solution__jMJr0\",\"Info\":\"Game_Info__5oLYc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Keycap\":\"Keycap_Keycap__1rmQq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ResetKeycap\":\"ResetKeycap_ResetKeycap__3xJc6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Guesses\":\"Guesses_Guesses__UyjWc\"};","export enum GuessesActionTypes {\n  GUESS = \"GUESS\",\n  RESET = \"RESET\",\n  OTHER = \"OTHER\"\n}\n\nexport interface GuessesState {\n  readonly guesses: ReadonlySet<string>\n  readonly solution: string\n  readonly status: string\n}\n\n","import words from './words.json'\nexport default () => words[Math.floor((Math.random() * words.length))].toUpperCase()\n","import { Reducer } from 'redux';\nimport { GuessesState, GuessesActionTypes } from './types'\nimport word from '../../utilities/words'\n\nconst allowedIncorrectGuesses = 7;\n\nconst initialState: GuessesState = {\n  guesses: new Set(),\n  solution: word(),\n  status: `${allowedIncorrectGuesses} guesses remaining`\n}\n\nconst hasWon = (solution: string, guesses: Set<string>) => {\n  return Array.from(solution).every(letter => guesses.has(letter))\n}\n\nconst hasLost = (solution: string, guesses: Set<string>) => {\n  return [...guesses].filter(character => !solution.includes(character)).length >= allowedIncorrectGuesses\n}\n\nconst reducer: Reducer<GuessesState> = (state = initialState, action) => {\n  switch (action.type) {\n    case GuessesActionTypes.RESET:\n      return { ...initialState, solution: word() }\n    case GuessesActionTypes.GUESS:   \n      // Return original state if guess is not new\n      if (state.guesses.has(action.payload)) return { ...state }\n\n      // Copy new `guesses` set\n      const guesses = new Set(state.guesses).add(action.payload)\n      \n      // Determine if game is won or lost\n      if (hasWon(state.solution, guesses)) {\n        const status = \"Congratulations, you guessed correctly!\"\n        return { ...state, guesses: guesses, status: status }\n      } else if (hasLost(state.solution, guesses)) {\n        const status = `You failed. The answer was ${state.solution}.`\n        return { ...state, guesses: guesses, status: status }\n      }\n\n      // Return state with new guesses\n      const incorrectGuessesRemaining = allowedIncorrectGuesses - [...guesses].filter(character => {\n        return !state.solution.includes(character)\n      }).length\n\n      const status = `${incorrectGuessesRemaining} guesses remaining.`\n\n      return { ...state, guesses: guesses, status: status }\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","import { combineReducers } from 'redux'\nimport guessesReducer from './guesses/reducer'\nimport { GuessesState } from './guesses/types'\n\nexport interface ApplicationState {\n  guesses: GuessesState\n}\n\nexport const rootReducer = combineReducers<ApplicationState>({\n  guesses: guessesReducer\n})\n","import React from 'react'\nimport classes from './Keycap.module.css'\n\ninterface KeycapProps {\n  letter: string\n  handler: (event: React.MouseEvent) => any\n}\n\nexport default React.memo((props: KeycapProps) => {\n  return (\n    <button onClick={props.handler} className={classes.Keycap}>{props.letter}</button>\n  )\n})\n","import React from 'react'\nimport classes from './ResetKeycap.module.css'\n\ninterface ResetKeycapProps {\n  handler: (event: React.MouseEvent) => any\n}\n\nexport default React.memo((props: ResetKeycapProps) => {\n  return (\n    <button onClick={props.handler} className={classes.ResetKeycap}>Reset</button>\n  )\n})\n","import React from 'react'\nimport Keycap from '../Keycap/Keycap'\nimport ResetKeycap from '../ResetKeycap/ResetKeycap'\n\nimport classes from './Guesses.module.css'\nimport { guessAction, resetAction } from '../../store/guesses/actions'\n\ninterface GuessesProps {\n  guessClickHandler: typeof guessAction\n  resetClickHandler: typeof resetAction\n}\n\nexport default React.memo((props: GuessesProps) => {\n  const layout: Array<Array<string>> = [\n    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n    ['Z', 'X', 'C', 'V', 'B', 'N', 'M']\n  ]\n\n  const keycaps = layout.map((row, index) => {\n    const characters = row.map(letter =>\n      <Keycap key={letter} letter={letter} handler={() => props.guessClickHandler(letter)} />\n    )\n\n    // Append reset button to end of last row\n    if (index === layout.length - 1) {\n      characters.push(<ResetKeycap key=\"reset\" handler={props.resetClickHandler} />)\n    }\n\n    return <div key={index} className={classes.Guesses}>{characters}</div>\n  })\n\n  return <>{keycaps}</>\n})\n","import React, { PureComponent } from 'react'\nimport Guesses from '../../components/Guesses/Guesses'\nimport classes from './Game.module.css'\nimport { connect } from 'react-redux'\nimport { Dispatch } from 'redux'\nimport { guessAction, resetAction } from '../../store/guesses/actions'\nimport { ApplicationState } from '../../store'\nimport { GuessesState } from '../../store/guesses/types'\n\ninterface DispatchProps {\n  resetClickHandler: typeof resetAction\n  guessClickHandler: typeof guessAction\n}\n\ntype Props = GuessesState & DispatchProps\n\nclass Game extends PureComponent<Props> {\n  displaySolution = () => Array.from(this.props.solution).map(character => \n    this.props.guesses.has(character) ? character : '_'\n  ).join('')\n\n  render() {\n    return (\n      <div className={classes.Game}>\n        <div className={classes.Solution}>\n          {this.displaySolution()}\n        </div>\n        <div className={classes.Info}>\n          {this.props.status}\n        </div>\n        <div>\n          <Guesses guessClickHandler={this.props.guessClickHandler}\n            resetClickHandler={this.props.resetClickHandler} />\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = ({ guesses }: ApplicationState) => ({\n  guesses: guesses.guesses, \n  solution: guesses.solution,\n  status: guesses.status\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  resetClickHandler: () => dispatch(resetAction()),\n  guessClickHandler: (letter: string) => dispatch(guessAction(letter))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Game)\n","import { action } from 'typesafe-actions'\nimport { GuessesActionTypes } from './types'\n\nexport const guessAction = (letter: string) => action(GuessesActionTypes.GUESS, letter)\nexport const resetAction = () => action(GuessesActionTypes.RESET)\n","import React, { Component } from 'react'\nimport Game from './containers/Game/Game'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return <Game />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport configureStore from './configureStore'\n\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root') as HTMLElement\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { Store, createStore, applyMiddleware } from 'redux'\nimport { ApplicationState, rootReducer } from './store'\nimport logger from 'redux-logger'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nexport default (): Store<ApplicationState> => createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(logger)\n  )\n)\n"],"sourceRoot":""}